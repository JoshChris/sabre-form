@mixin linear-gradient($angle, $color-stops...) {
	$_angle-with-vendor-prefix: "";
	$_angle: "";
	@if $angle == "to top" or $angle == "bottom" {
		$_angle-with-vendor-prefix: bottom;
		$_angle: to top;
	} @else if $angle == "to right" or $angle == "left" {
		$_angle-with-vendor-prefix: left;
		$_angle: to right;
	} @else if $angle == "to bottom" or $angle == "top" {
		$_angle-with-vendor-prefix: top;
		$_angle: to bottom;
	} @else if $angle == "to left" or $angle == "right" {
		$_angle-with-vendor-prefix: right;
		$_angle: to left;
	} @else if $angle == "to top right" or $angle == "bottom left" {
		$_angle-with-vendor-prefix: bottom left;
		$_angle: to top right;
	} @else if $angle == "to bottom right" or $angle == "top left" {
		$_angle-with-vendor-prefix: top left;
		$_angle: to bottom right;
	} @else if $angle == "to bottom left" or $angle == "top right" {
		$_angle-with-vendor-prefix: top right;
		$_angle: to bottom left;
	} @else if $angle == "to top left" or $angle == "bottom right" {
		$_angle-with-vendor-prefix: bottom right;
		$_angle: to top left;
	} @else {
		$_angle-with-vendor-prefix: $angle % 360;
		$_angle: (90 - $angle) % 360;
	}
	background: nth($color-stops, 1);
	background: -webkit-linear-gradient($_angle-with-vendor-prefix, $color-stops);
	background: -moz-linear-gradient($_angle-with-vendor-prefix, $color-stops);
	background: -o-linear-gradient($_angle-with-vendor-prefix, $color-stops);
	background: linear-gradient($_angle, $color-stops);
}

@mixin border-radius($a: false, $b: false, $c: false, $d: false, $top-left: 0, $top-right: 0, $bottom-right: 0, $bottom-left: 0, $top: false, $bottom: false, $right: false, $left: false, $radius: false) {

  // Handle shorthand notation like CSS3 would
  // You shouldn't explictly set these variables when calling the mixin
  @if $d { $radius: $a $b $c $d; }
  @else if $c { $radius: $a $b $c; }
  @else if $b { $radius: $a $b; }
  @else if $a { $radius: $a; }

  @else {

    // Target individual corners (or groups) instead of using CSS3 shorthand
    @if $top { $top-left: $top; $top-right: $top; }
    @if $bottom { $bottom-right: $bottom; $bottom-left: $bottom; }
    @if $left { $top-left: $left; $bottom-left: $left; }
    @if $right { $top-right: $right; $bottom-right: $right; }

    // Set the radius
    $radius: $top-left $top-right $bottom-right $bottom-left;
  }

  // Webkit, Mozilla, KHTML and standard CSS3
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -khtml-border-radius: $radius;
  border-radius: $radius;

}

@mixin transition($on, $s:.1s) {
	-webkit-transition: $on $s;
	-moz-transition: $on $s;
	-o-transition: $on $s;
	-ms-transition: $on $s;
	transition: $on $s;
}

@mixin transitionlist($list...) {
	-webkit-transition: $list;
	-moz-transition: $list;
	-o-transition: $list;
	-ms-transition: $list;
	transition: $list;
}

@mixin inlineblock(){
	display: inline-block;
	*display: inline;
	*zoom: 1;
}

@mixin opacity($percent) {
	/* IE 8 */
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="$percent")";

	/* IE 5-7 */
	filter: alpha(opacity=$percent);

	/* Netscape */
	-moz-opacity: ($percent/100);

	/* Safari 1.x */
	-khtml-opacity: ($percent/100);

	/* Default */
	opacity: ($percent/100);	
}

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
	-webkit-box-shadow:$top $left $blur $color #{$inset};
	-moz-box-shadow:$top $left $blur $color #{$inset};
	box-shadow:$top $left $blur $color #{$inset};
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == 'string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));
  
  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));
  
  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
      #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));
    }
  }
  
  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));
  
  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);
  
  // Determine if the sign should be positive or negative
  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }
  
  @return calc(#{$m*100}vw #{$sign} #{$b});
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list,1);
    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }
  @return $sortedMap;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list,$i), 'space');
    }
  }
  @return $newList;
}